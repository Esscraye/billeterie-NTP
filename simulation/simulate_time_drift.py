#!/usr/bin/env python3
"""
Script de simulation de d√©rive temporelle pour d√©monstration NTP
"""

import asyncio
import aiohttp
import random
import time
from datetime import datetime
from typing import List, Dict

class NTPSimulator:
    def __init__(self, api_base_url: str = "http://localhost:8000"):
        self.api_base_url = api_base_url
        self.servers = ["server-1", "server-2", "server-3", "server-4", "server-5"]
        
    async def setup_time_drift(self, scenario: str = "major_drift"):
        """Configure un sc√©nario de d√©rive temporelle"""
        scenarios = {
            "minor_drift": {
                "server-1": 0.0,
                "server-2": -1.0,
                "server-3": 0.5
            },
            "major_drift": {
                "server-1": 0.0,
                "server-2": -10.0,
                "server-3": 5.0,
                "server-4": -3.0
            },
            "extreme_drift": {
                "server-1": 0.0,
                "server-2": -30.0,
                "server-3": 15.0,
                "server-4": -8.0,
                "server-5": 12.0
            }
        }
        
        if scenario not in scenarios:
            print(f"Sc√©nario '{scenario}' non trouv√©. Utilisation de 'major_drift'")
            scenario = "major_drift"
        
        async with aiohttp.ClientSession() as session:
            print(f"üïê Configuration du sc√©nario: {scenario}")
            
            for server_id, offset in scenarios[scenario].items():
                try:
                    async with session.post(
                        f"{self.api_base_url}/api/simulation/set-offset",
                        json={"server_id": server_id, "offset_seconds": offset}
                    ) as response:
                        if response.status == 200:
                            print(f"  ‚úÖ {server_id}: {offset:+.1f}s")
                        else:
                            print(f"  ‚ùå Erreur pour {server_id}: {response.status}")
                except Exception as e:
                    print(f"  ‚ùå Erreur pour {server_id}: {e}")
    
    async def simulate_concurrent_reservations(self, seat_id: int, num_reservations: int = 3):
        """Simule des r√©servations concurrentes sur le m√™me si√®ge"""
        print(f"\nüé´ Simulation de {num_reservations} r√©servations concurrentes sur le si√®ge {seat_id}")
        
        # Pr√©parer les r√©servations
        reservations = []
        for i in range(num_reservations):
            server_id = random.choice(self.servers[:num_reservations])
            customer_name = f"Client_{i+1}_{int(time.time())}"
            reservations.append((server_id, customer_name))
        
        async with aiohttp.ClientSession() as session:
            # Lancer toutes les r√©servations en parall√®le
            tasks = []
            for server_id, customer_name in reservations:
                task = self.make_reservation(session, seat_id, customer_name, server_id)
                tasks.append(task)
            
            # Attendre toutes les r√©servations
            results = await asyncio.gather(*tasks, return_exceptions=True)
            
            # Analyser les r√©sultats
            successes = []
            failures = []
            
            for i, result in enumerate(results):
                server_id, customer_name = reservations[i]
                if isinstance(result, Exception):
                    failures.append((server_id, customer_name, str(result)))
                    print(f"  ‚ùå {server_id} ({customer_name}): {result}")
                else:
                    successes.append((server_id, customer_name, result))
                    print(f"  ‚úÖ {server_id} ({customer_name}): R√©servation OK")
            
            print(f"\nüìä R√©sultats: {len(successes)} succ√®s, {len(failures)} √©checs")
            
            if len(successes) > 1:
                print("‚ö†Ô∏è  CONFLIT D√âTECT√â: Plusieurs r√©servations r√©ussies pour le m√™me si√®ge!")
            
        # Attendre un peu avant de v√©rifier les conflits
        await asyncio.sleep(2)
        await self.check_conflicts()
    
    async def make_reservation(self, session: aiohttp.ClientSession, seat_id: int, customer_name: str, server_id: str):
        """Effectue une r√©servation via l'API"""
        try:
            async with session.post(
                f"{self.api_base_url}/api/reservations/reserve",
                params={"server_id": server_id},
                json={"seat_id": seat_id, "customer_name": customer_name}
            ) as response:
                if response.status == 200:
                    return await response.json()
                else:
                    error_text = await response.text()
                    raise Exception(f"HTTP {response.status}: {error_text}")
        except Exception as e:
            raise Exception(f"Erreur de r√©servation: {e}")
    
    async def check_conflicts(self):
        """V√©rifie et affiche les conflits d√©tect√©s"""
        async with aiohttp.ClientSession() as session:
            try:
                async with session.get(f"{self.api_base_url}/api/reservations/conflicts") as response:
                    if response.status == 200:
                        conflicts = await response.json()
                        
                        if not conflicts:
                            print("‚úÖ Aucun conflit d√©tect√©")
                            return
                        
                        print(f"\n‚ö†Ô∏è  {len(conflicts)} conflit(s) d√©tect√©(s):")
                        for conflict in conflicts:
                            print(f"  - Si√®ge {conflict['seat_id']}: "
                                  f"√©cart de {conflict['time_difference_seconds']:.2f}s "
                                  f"({conflict['detected_at']})")
                    else:
                        print(f"‚ùå Erreur lors de la v√©rification des conflits: {response.status}")
            except Exception as e:
                print(f"‚ùå Erreur: {e}")
    
    async def reset_simulation(self):
        """Remet √† z√©ro la simulation"""
        async with aiohttp.ClientSession() as session:
            try:
                async with session.post(f"{self.api_base_url}/api/simulation/stop-simulation") as response:
                    if response.status == 200:
                        print("üîÑ Simulation arr√™t√©e - Tous les serveurs synchronis√©s")
                    else:
                        print(f"‚ùå Erreur lors de l'arr√™t: {response.status}")
            except Exception as e:
                print(f"‚ùå Erreur: {e}")
    
    async def initialize_seats(self, total_seats: int = 100):
        """Initialise les si√®ges"""
        async with aiohttp.ClientSession() as session:
            try:
                async with session.post(f"{self.api_base_url}/api/seats/initialize", 
                                       json={"total_seats": total_seats}) as response:
                    if response.status == 200:
                        print(f"ü™ë {total_seats} si√®ges initialis√©s")
                    else:
                        print(f"‚ùå Erreur lors de l'initialisation: {response.status}")
            except Exception as e:
                print(f"‚ùå Erreur: {e}")

async def run_full_demo():
    """Lance une d√©monstration compl√®te"""
    simulator = NTPSimulator()
    
    print("üé≠ === D√âMONSTRATION NTP - SYST√àME DE R√âSERVATION ===\n")
    
    # 1. Initialiser les si√®ges
    print("1Ô∏è‚É£ Initialisation des si√®ges...")
    await simulator.initialize_seats(100)
    
    # 2. Test avec synchronisation NTP (pas de conflits attendus)
    print("\n2Ô∏è‚É£ Test avec synchronisation NTP...")
    await simulator.reset_simulation()
    await asyncio.sleep(1)
    
    print("R√©servations avec serveurs synchronis√©s:")
    await simulator.simulate_concurrent_reservations(seat_id=1, num_reservations=2)
    
    # 3. Configuration de la d√©rive temporelle
    print("\n3Ô∏è‚É£ Configuration de la d√©rive temporelle...")
    await simulator.setup_time_drift("major_drift")
    await asyncio.sleep(1)
    
    # 4. Test avec d√©rive temporelle (conflits attendus)
    print("\n4Ô∏è‚É£ Test avec d√©rive temporelle...")
    print("R√©servations avec serveurs d√©synchronis√©s:")
    await simulator.simulate_concurrent_reservations(seat_id=2, num_reservations=3)
    
    # 5. Test avec d√©rive extr√™me
    print("\n5Ô∏è‚É£ Test avec d√©rive extr√™me...")
    await simulator.setup_time_drift("extreme_drift")
    await asyncio.sleep(1)
    
    print("R√©servations avec d√©rive extr√™me:")
    await simulator.simulate_concurrent_reservations(seat_id=3, num_reservations=4)
    
    # 6. R√©sum√© final
    print("\n6Ô∏è‚É£ R√©sum√© final des conflits...")
    await simulator.check_conflicts()
    
    print("\nüéâ D√©monstration termin√©e!")
    print("üí° Conclusion: La synchronisation NTP est essentielle pour √©viter les conflits")
    print("   dans les syst√®mes distribu√©s critiques comme les r√©servations.")

if __name__ == "__main__":
    import argparse
    
    parser = argparse.ArgumentParser(description="Simulateur de d√©rive temporelle NTP")
    parser.add_argument("--scenario", choices=["minor_drift", "major_drift", "extreme_drift"],
                        default="major_drift", help="Sc√©nario de d√©rive √† utiliser")
    parser.add_argument("--seat", type=int, default=1, help="Num√©ro du si√®ge √† tester")
    parser.add_argument("--reservations", type=int, default=3, help="Nombre de r√©servations concurrentes")
    parser.add_argument("--full-demo", action="store_true", help="Lancer la d√©monstration compl√®te")
    parser.add_argument("--reset", action="store_true", help="Arr√™ter toutes les simulations")
    
    args = parser.parse_args()
    
    simulator = NTPSimulator()
    
    if args.full_demo:
        asyncio.run(run_full_demo())
    elif args.reset:
        asyncio.run(simulator.reset_simulation())
    else:
        async def run_custom():
            await simulator.setup_time_drift(args.scenario)
            await asyncio.sleep(1)
            await simulator.simulate_concurrent_reservations(args.seat, args.reservations)
        
        asyncio.run(run_custom())
